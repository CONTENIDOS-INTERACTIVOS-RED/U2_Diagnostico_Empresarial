{"remainingRequest":"/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/src/views/curso/Tema4.vue?vue&type=template&id=c8c298c2&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/src/views/curso/Tema4.vue","mtime":1747334750300},{"path":"/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}