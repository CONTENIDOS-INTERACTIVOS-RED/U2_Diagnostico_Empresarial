{"remainingRequest":"/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/src/views/curso/Tema1.vue?vue&type=template&id=765a579f&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/src/views/curso/Tema1.vue","mtime":1747334750300},{"path":"/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Diagnostico_Empresarial/U2_Diagnostico_Empresarial/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMS4gRGlhZ27Ds3N0aWNvIGludGVybm8gZGUgbGEgb3JnYW5pemFjacOzbiciKQogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5vdmVyZmxvdy1oaWRkZW4KICAgIC5iZy1mdWxsLXdpZHRoLTEuYmctZm9uZG8tMQogICAgICAucHgtNC5weC1tZC01LnBiLW1kLTMgCiAgICAgICAgLnJvdy5tYi01ICAgICAgIAogICAgICAgICAgLmNvbC1sZy04CiAgICAgICAgICAgIC5iZy1jb2xvci0zLnAtNC5tYi00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgICAgIHAubWItMCBTZWfDum4gTHVuYSBHb256w6FsZXogKDIwMTUpLCBlbCBhbsOhbGlzaXMgZGVsIGVudG9ybm8gaW50ZXJubyBkZSB1bmEgZW1wcmVzYSByZXF1aWVyZSBpZGVudGlmaWNhciB0YW50byBzdXMgZm9ydGFsZXphcywgcXVlIHJldmVsYW4gbG8gcXVlIGVzIGNhcGF6IGRlIGxvZ3JhciwgY29tbyBzdXMgZGViaWxpZGFkZXMsIHF1ZSBtdWVzdHJhbiBsYXMgbGltaXRhY2lvbmVzIHF1ZSBlbmZyZW50YS4gUGFyYSBlbGxvLCBlcyBuZWNlc2FyaW8gYWRvcHRhciB1bmEgcGVyc3BlY3RpdmEgZXN0cmF0w6lnaWNhIHF1ZSBwZXJtaXRhIGV4YW1pbmFyIGEgZm9uZG8sIGVzdG9zIGVsZW1lbnRvcy4KICAgICAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1kb3duIikgRXN0ZSBhbsOhbGlzaXMgZGViZSBpbmNsdWlyIHZhcmlvcyBhc3BlY3RvcyBlc2VuY2lhbGVzIGNvbW86IAogICAgICAgICAgICAgICAgICAKICAgICAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAgCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzUucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKSAKCiAgICAgICAgLnJvdy5tYi0zICAgICAgIAogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIC5iZy1jb2xvci00LnAtMy5oLTEwMC5qMShkYXRhLWFvcz0iZmFkZS1kb3duIikKICAgICAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzYuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICAgICAgaDUgUHJpbWVybwogICAgICAgICAgICAgICAgICBwLm1iLTAgTGEgI1tiIGVzdHJhdGVnaWFdIGFjdHVhbCBkZSBsYSBlbXByZXNhLCBldmFsdWFuZG8gY8OzbW8gb3BlcmEgZW4gZWwgcHJlc2VudGUuICAgCgogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIC5iZy1jb2xvci00LnAtMy5oLTEwMC5qMShkYXRhLWFvcz0iZmFkZS1kb3duIikKICAgICAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzcuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICAgICAgaDUgU2VndW5kbwogICAgICAgICAgICAgICAgICBwLm1iLTAgTGEgI1tiIGNhZGVuYSBkZSB2YWxvcl0sIHF1ZSBkZXRhbGxhIGxhcyBhY3RpdmlkYWRlcyBxdWUgZ2VuZXJhbiB2YWxvciBwYXJhIGVsIGNsaWVudGUuICAKCiAgICAgICAgICAuY29sLWxnLTQKICAgICAgICAgICAgLmJnLWNvbG9yLTQucC0zLmgtMTAwLmoxKGRhdGEtYW9zPSJmYWRlLWRvd24iKQogICAgICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvOC5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgICAgICBoNSBUZXJjZXJvCiAgICAgICAgICAgICAgICAgIHAubWItMCBMb3MgI1tiIGRlc2Fmw61vcyBlc3RyYXTDqWdpY29zXSBxdWUgZW5mcmVudGEgbGEgb3JnYW5pemFjacOzbi4gCgogICAgICAgIC5yb3cubWItNSAgICAgICAKICAgICAgICAgIC5jb2wtbGctNAogICAgICAgICAgICAuYmctY29sb3ItNC5wLTMuaC0xMDAuajEoZGF0YS1hb3M9ImZhZGUtdXAiKQogICAgICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvOS5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgICAgICBoNSBDdWFydG8gCiAgICAgICAgICAgICAgICAgIHAubWItMCBTdSAjW2IgcG9zaWNpw7NuIGNvbXBldGl0aXZhXSBmcmVudGUgYSBsb3Mgcml2YWxlcy4gCgogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIC5iZy1jb2xvci00LnAtMy5oLTEwMC5qMShkYXRhLWFvcz0iZmFkZS11cCIpCiAgICAgICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy8xMC5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgICAgICBoNSBRdWludG8KICAgICAgICAgICAgICAgICAgcC5tYi0wIExvcyAjW2IgcmVjdXJzb3MgZGlzcG9uaWJsZXNdLCB0YW50byB0YW5naWJsZXMgY29tbyBpbnRhbmdpYmxlcy4gCgogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIC5iZy1jb2xvci00LnAtMy5oLTEwMC5qMShkYXRhLWFvcz0iZmFkZS11cCIpCiAgICAgICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy8xMS5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgICAgICBoNSBTZXh0bwogICAgICAgICAgICAgICAgICBwLm1iLTAgTGEgI1tiIGVzdHJ1Y3R1cmEgb3JnYW5pemFjaW9uYWxdIHF1ZSBkZWZpbmUgY8OzbW8gc2UgY29vcmRpbmFuIHN1cyBvcGVyYWNpb25lcy4gCgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItMi5tYi01KGRhdGEtYW9zPSJmYWRlLXVwIikgCiAgICAgIC5weC00LnB4LW1kLTUucHktMgogICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvMTIuc3ZnIikKICAgICAgICAgIC5jb2wtbGcgCiAgICAgICAgICAgIHAubWItMCBDYWRhIHVubyBkZSBlc3RvcyBwdW50b3MgcHJvcG9yY2lvbmEgbGEgaW5mb3JtYWNpw7NuIG5lY2VzYXJpYSBwYXJhIGNvbXByZW5kZXIgbGEgc2l0dWFjacOzbiBpbnRlcm5hIGRlIGxhIGVtcHJlc2EsIHBlcm1pdGllbmRvIGlkZW50aWZpY2FyIG9wb3J0dW5pZGFkZXMgcXVlIHB1ZWRlbiBwb3RlbmNpYXIgc3UgY3JlY2ltaWVudG8geSBkZXRlY3RhciDDoXJlYXMgcXVlIHJlcXVpZXJlbiBtZWpvcmFzLiBFbCBlbmZvcXVlIHNlIGNlbnRyYSBlbiByZWNvbm9jZXIgbGFzIGZvcnRhbGV6YXMgcXVlIHNlIHB1ZWRlbiBhcHJvdmVjaGFyIHkgbGFzIGRlYmlsaWRhZGVzIHF1ZSBlcyBuZWNlc2FyaW8gY29ycmVnaXIsIGZhY2lsaXRhbmRvIGFzw60gbGEgZm9ybXVsYWNpw7NuIGRlIGVzdHJhdGVnaWFzIG3DoXMgZWZlY3RpdmFzIHkgYWxpbmVhZGFzIGNvbiBsYSByZWFsaWRhZCBvcmdhbml6YWNpb25hbC4gCgogICAgI3RfMV8xLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDEuMV0gRXZhbHVhY2nDs24gZGUgbGEgZXN0cnVjdHVyYSBvcmdhbml6YWNpb25hbAoKICAgIHAoZGF0YS1hb3M9ImZhZGUtZG93biIpIExhIGV2YWx1YWNpw7NuIGRlIGxhIGVzdHJ1Y3R1cmEgb3JnYW5pemFjaW9uYWwgZXMgY2xhdmUgcGFyYSBnYXJhbnRpemFyIGxhIGVmaWNpZW5jaWEgeSBjb2hlcmVuY2lhIGVuIGVsIGZ1bmNpb25hbWllbnRvIGludGVybm8gZGUgdW5hIGVtcHJlc2EuCgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNS5tYi01CiAgICAgIC5weC00LnAtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIgCiAgICAgICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvMTMucG5nJywgYWx0PScnKSAgICAgICAgICAgICAgICAgIAogICAgICAgICAgLmNvbC1sZy04CiAgICAgICAgICAgIGgyLm1iLTQoZGF0YS1hb3M9ImZsaXAtdXAiKSBFdmFsdWFjacOzbiBkZSBsYSBlc3RydWN0dXJhIG9yZ2FuaXphY2lvbmFsCiAgICAgICAgICAgIHAubWItNChkYXRhLWFvcz0iZmFkZS1yaWdodCIpIEVuIGVsIFBERiBFdmFsdWFjacOzbiBkZSBsYSBlc3RydWN0dXJhIG9yZ2FuaXphY2lvbmFsLCBzZSBhbmFsaXphIGPDs21vIGxhIGZvcm1hIGVuIHF1ZSBzZSBhZ3J1cGFuIGZ1bmNpb25lcywgc2UgYXNpZ25hbiByZXNwb25zYWJpbGlkYWRlcyB5IHNlIGVzdGFibGVjZW4gbMOtbmVhcyBkZSBhdXRvcmlkYWQsIGltcGFjdGEgZGlyZWN0YW1lbnRlIGVuIGxhIG9wZXJhdGl2aWRhZCwgbGEgY29tdW5pY2FjacOzbiB5IGVsIGxvZ3JvIGRlIG9iamV0aXZvcyBlc3RyYXTDqWdpY29zLiBBIHRyYXbDqXMgZGUgZXN0ZSBjb250ZW5pZG8sIHNlIGV4cGxvcmFuIGRpZmVyZW50ZXMgdGlwb3MgZGUgZXN0cnVjdHVyYXMgeSBjcml0ZXJpb3MgcGFyYSBzdSBzZWxlY2Npw7NuLCBwZXJtaXRpZW5kbyBvcHRpbWl6YXIgbG9zIHByb2Nlc29zIHkgbWVqb3JhciBlbCBkZXNlbXBlw7FvIG9yZ2FuaXphY2lvbmFsLgogICAgICAgICAgICBhLmFuZXhvLm1iLTQuYmctd2hpdGUudy1maXQoOmhyZWY9Im9idGVuZXJMaW5rKCcvZG93bmxvYWRzL0FuZXhvXzEucGRmJykiIHRhcmdldD0iX2JsYW5rIikoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAgICAgICAgIC5hbmV4b19faWNvbm8oOnN0eWxlPSJ7J2JhY2tncm91bmQtY29sb3InOiAnI0ZDREZEQid9IikKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXBkZi5zdmciKQogICAgICAgICAgICAgIC5hbmV4b19fdGV4dG8KICAgICAgICAgICAgICAgIHAgPHN0cm9uZz5BbmV4by4gPC9zdHJvbmc+IEV2YWx1YWNpw7NuIGRlIGxhIGVzdHJ1Y3R1cmEgb3JnYW5pemFjaW9uYWwKCiAgICAjdF8xXzIudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMS4yXSBDw7NtbyBkaWFnbm9zdGljYXIgbGEgZXN0cnVjdHVyYSBvcmdhbml6YWNpb25hbAogICAgLnJvdy5tYi01ICAgICAgIAogICAgICAuY29sLWxnLTgKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWRvd24iKSBFbCBkaWFnbsOzc3RpY28gZGUgbGEgZXN0cnVjdHVyYSBvcmdhbml6YWNpb25hbCBlcyB1biBwcm9jZXNvIHF1ZSBwZXJtaXRlIGV2YWx1YXIgY8OzbW8gZXN0w6EgY29uZmlndXJhZGEgdW5hIGVtcHJlc2EgaW50ZXJuYW1lbnRlLCBjb24gZWwgZmluIGRlIGRldGVybWluYXIgc2kgc3UgZGlzZcOxbyBmYXZvcmVjZSBvIGRpZmljdWx0YSBlbCBsb2dybyBkZSBzdXMgb2JqZXRpdm9zLiBFc3RlIGFuw6FsaXNpcyBwcm9wb3JjaW9uYSB1biBwYW5vcmFtYSBkZXRhbGxhZG8gZGUgbGEgZGlzdHJpYnVjacOzbiBkZSBmdW5jaW9uZXMsIGxvcyBuaXZlbGVzIGRlIGF1dG9yaWRhZCwgbG9zIGNhbmFsZXMgZGUgY29tdW5pY2FjacOzbiB5IGxhIGZvcm1hIGVuIHF1ZSBpbnRlcmFjdMO6YW4gbGFzIGRpc3RpbnRhcyDDoXJlYXMsIHBhcmEgYWxjYW56YXIgcmVzdWx0YWRvcy4gICAgICAKICAgICAgICAuYmctY29sb3ItMy5wLTQubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvMTQuc3ZnIikKICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCBFc3RlIHByb2Nlc28gZGViZSBsbGV2YXJzZSBhIGNhYm8gY29uIGxhIGZpbmFsaWRhZCBkZSBpZGVudGlmaWNhciB0YW50byBsYXMgZGViaWxpZGFkZXMgY29tbyBsYXMgZm9ydGFsZXphcyBkZSBsYSBlc3RydWN0dXJhIG9yZ2FuaXphY2lvbmFsLCBkYWRvIHF1ZSwgYWwgcmVjb25vY2VyIGVzdG9zIGFzcGVjdG9zLCBzZSBwdWVkZSByZWFsaXphciB1bmEgY3VyYWR1csOtYSBkZSBsYSBpbmZvcm1hY2nDs24gcmVjb3BpbGFkYSwgZmFjaWxpdGFuZG8gYXPDrSBsYSB0b21hIGRlIGRlY2lzaW9uZXMgZXN0cmF0w6lnaWNhcyB5IG9yaWVudGFkYXMgYSBsYSBtZWpvcmEgY29udGludWEgZGUgbGEgZW1wcmVzYS4gCgogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtZG93biIpIFBhcmEgbGxldmFyIGEgY2FibyBlc3RlIGRpYWduw7NzdGljbywgc2UgaW5pY2lhIGNvbiBsYSByZWNvcGlsYWNpw7NuIGRlIGluZm9ybWFjacOzbiBzb2JyZSBsYSBlc3RydWN0dXJhIGFjdHVhbCwgc2UgaW5jbHV5ZSBvcmdhbmlncmFtYXMsIGRlc2NyaXBjaW9uZXMgZGUgcHVlc3RvcywgcHJvY2Vzb3MgZGUgdG9tYSBkZSBkZWNpc2lvbmVzIHkgZmx1am9zIGRlIHRyYWJham8uIEVsIG9iamV0aXZvIGVzIGVudGVuZGVyIGPDs21vIHNlIG9yZ2FuaXphIGxhIGVtcHJlc2EsIHF1acOpbiB0b21hIGxhcyBkZWNpc2lvbmVzIHkgY8OzbW8gc2UgY29vcmRpbmEgZWwgdHJhYmFqbyBlbnRyZSBkZXBhcnRhbWVudG9zLgoKICAgICAgICBoNShkYXRhLWFvcz0iZmFkZS1kb3duIikgTG9zIGFzcGVjdG9zIHByaW5jaXBhbGVzIHF1ZSBzZSBhbmFsaXphbiBpbmNsdXllbjoKICAgICAgLmNvbC1sZy00Lm1iLTMubWItbGctMCAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZy5pbWctYS5pbWctdChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzE1LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKCgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItaW5mby5tYi01KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikKICAgICAgLnB4LTQucC1tZC01CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy0xMAogICAgICAgICAgICBJbWFnZW5JbmZvZ3JhZmljYS5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgICAgICAgICAgICB0ZW1wbGF0ZSh2LXNsb3Q6aW1hZ2VuKQogICAgICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy8xNi5zdmcnLCBhbHQ9JycsIHN0eWxlPSJtYXgtd2lkdGg6IDExMDZweDsiKS5teC1hdXRvCgogICAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucC0zKHg9IjklIiB5PSIxNCUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICAgIGg1IERpdmlzacOzbiBkZWwgdHJhYmFqbwogICAgICAgICAgICAgICAgICBwIFNlIGV2YWzDumEgY8OzbW8gZXN0w6FuIGRpc3RyaWJ1aWRhcyBsYXMgdGFyZWFzIGVudHJlIGxhcyBkaWZlcmVudGVzIHVuaWRhZGVzIHkgc2kgZXN0YSBkaXZpc2nDs24gcHJvbXVldmUgbGEgZWZpY2llbmNpYSBvIGdlbmVyYSByZWR1bmRhbmNpYXMgeSBzb2JyZWNhcmdhIGVuIGNpZXJ0b3Mgcm9sZXMuICAKCiAgICAgICAgICAgICAgICAuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5wLTMoeD0iMjklIiB5PSIxNCUiIG51bWVybz0iKyIpCiAgICAgICAgICAgICAgICAgIGg1IEplcmFycXXDrWEgeSBuaXZlbGVzIGRlIGF1dG9yaWRhZCAKICAgICAgICAgICAgICAgICAgcCBTZSBhbmFsaXphIGN1w6FudG9zIG5pdmVsZXMgamVyw6FycXVpY29zIGV4aXN0ZW4sIGPDs21vIGZsdXllIGxhIGluZm9ybWFjacOzbiBkZXNkZSBsYSBkaXJlY2Npw7NuIGhhc3RhIGxvcyBlbXBsZWFkb3MgeSBzaSBsb3MgbMOtZGVyZXMgdGllbmVuIGVsIGFsY2FuY2UgbmVjZXNhcmlvIHBhcmEgdG9tYXIgZGVjaXNpb25lcyBvcG9ydHVuYXMuIAoKICAgICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnAtMyh4PSI3MSUiIHk9IjE0JSIgbnVtZXJvPSIrIikKICAgICAgICAgICAgICAgICAgaDUgQ29vcmRpbmFjacOzbiB5IGNvbXVuaWNhY2nDs24gCiAgICAgICAgICAgICAgICAgIHAgU2UgZXhhbWluYSBjw7NtbyBzZSBjb25lY3RhbiBsb3MgZGlzdGludG9zIGRlcGFydGFtZW50b3MsIGxhIHZlbG9jaWRhZCB5IHByZWNpc2nDs24gY29uIGxhIHF1ZSBmbHV5ZSBsYSBpbmZvcm1hY2nDs24sIHkgc2kgZXhpc3RlbiBiYXJyZXJhcyBxdWUgZW50b3JwZXpjYW4gbGEgY29sYWJvcmFjacOzbi4gCgogICAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucC0zKHg9IjkxJSIgeT0iMTQlIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgICBoNSBGbGV4aWJpbGlkYWQgeSBjYXBhY2lkYWQgZGUgYWRhcHRhY2nDs24KICAgICAgICAgICAgICAgICAgcCBTZSByZXZpc2Egc2kgbGEgZXN0cnVjdHVyYSBwZXJtaXRlIGEgbGEgb3JnYW5pemFjacOzbiByZXNwb25kZXIgZGUgZm9ybWEgw6FnaWwgYSBsb3MgY2FtYmlvcyBkZWwgZW50b3JubywgaWRlbnRpZmljYXIgb3BvcnR1bmlkYWRlcyBvIGVuZnJlbnRhciBkZXNhZsOtb3Mgc2luIHF1ZSBsb3MgcHJvY2Vzb3MgaW50ZXJub3Mgc2UgdnVlbHZhbiByw61naWRvcyBvIGxlbnRvcy4gCgogICAgLnJvdy5tYi01ICAgICAgIAogICAgICAuY29sLWxnLTgKICAgICAgICAuYmctY29sb3ItMi5wLTQubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIHAubWItMCBBbCByZWFsaXphciBlc3RlIGRpYWduw7NzdGljbywgZXMgcG9zaWJsZSBkZXRlY3RhciBkaXZlcnNvcyBwcm9ibGVtYXMsIGNvbW8gbGEgZHVwbGljaWRhZCBkZSBmdW5jaW9uZXMsIGN1ZWxsb3MgZGUgYm90ZWxsYSBlbiBsYSB0b21hIGRlIGRlY2lzaW9uZXMsIGZhbHRhIGRlIGNvb3JkaW5hY2nDs24gZW50cmUgw6FyZWFzLCBzb2JyZWNhcmdhIGVuIGNpZXJ0b3Mgbml2ZWxlcyBqZXLDoXJxdWljb3MgbyBpbmNsdXNvIHVuaWRhZGVzIHF1ZSBubyBhcG9ydGFuIHZhbG9yIGFsIGN1bXBsaW1pZW50byBkZSBsb3Mgb2JqZXRpdm9zIG9yZ2FuaXphY2lvbmFsZXMuCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1kb3duIikgQSBjb250aW51YWNpw7NuLCBzZSBwcmVzZW50YSB1biBjdWFkcm8gY29uIGVqZW1wbG9zIGRlIHBvc2libGVzIGZvcnRhbGV6YXMgeSBkZWJpbGlkYWRlcyBpZGVudGlmaWNhYmxlcyBlbiBsYSBlc3RydWN0dXJhIG9yZ2FuaXphY2lvbmFsOgogICAgICAgICAgICAgIAogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wIAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvNS5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpICAKCiAgICAudGl0dWxvLWZpZ3VyYShkYXRhLWFvcz0iZmFkZS1yaWdodCIpCiAgICAgIGg1IFRhYmxhIDEuIAogICAgICBzcGFuIFBvc2libGVzIGRlYmlsaWRhZGVzIHkgZm9ydGFsZXphcyBlbiBsYSBlc3RydWN0dXJhIG9yZ2FuaXphY2lvbmFsCgogICAgLnRhYmxhLWEtMS5tYi01KGRhdGEtYW9zPSJmYWRlLWxlZnQiKSAKICAgICAgdGFibGUKICAgICAgICB0aGVhZC50ZXh0LWNlbnRlcgogICAgICAgICAgdHIKICAgICAgICAgICAgdGggRm9ydGFsZXphcwogICAgICAgICAgICB0aCBEZWJpbGlkYWRlcwogICAgICAgIHRib2R5CiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBFc3RydWN0dXJhIGZsZXhpYmxlIHF1ZSBwZXJtaXRlIGFkYXB0YWNpw7NuIHLDoXBpZGEuIAogICAgICAgICAgICB0ZCBEZXNjb25leGnDs24gZW50cmUgZGVwYXJ0YW1lbnRvcy4gIAogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgQ29tdW5pY2FjacOzbiBpbnRlcm5hIGVmaWNpZW50ZSB5IGZsdWlkYS4gCiAgICAgICAgICAgIHRkIFNvYnJlY2FyZ2EgZW4gY2llcnRvcyBwdWVzdG9zIGNyw610aWNvcy4gCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBDYWRlbmEgZGUgbWFuZG8gY2xhcmEgcXVlIGFnaWxpemEgZGVjaXNpb25lcy4KICAgICAgICAgICAgdGQgUHJvY2Vzb3MgaW50ZXJub3MgcG9jbyBkZWZpbmlkb3MgbyByZWR1bmRhbnRlcy4gIAogICAgICAgICAgdHIKICAgICAgICAgICAgdGQgRXF1aXBvcyBtdWx0aWRpc2NpcGxpbmFyaW9zIHF1ZSBmb21lbnRhbiBsYSBpbm5vdmFjacOzbi4gCiAgICAgICAgICAgIHRkIER1cGxpY2lkYWQgZGUgZnVuY2lvbmVzLiAgCiAgICAgICAgICB0cgogICAgICAgICAgICB0ZCBDdWx0dXJhIG9yZ2FuaXphY2lvbmFsIHPDs2xpZGEsIHF1ZSBtb3RpdmEgYWwgcGVyc29uYWwuCiAgICAgICAgICAgIHRkIEFidW5kYW50ZXMgbml2ZWxlcyBqZXLDoXJxdWljb3MuCgogICAgLnJvdy5tYi01ICAgICAgIAogICAgICAuY29sLWxnLTgKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWRvd24iKSBBIHBhcnRpciBkZSBlc3RvcyBoYWxsYXpnb3MsIHNlIHB1ZWRlbiBwbGFudGVhciBlc3RyYXRlZ2lhcyBkZSBtZWpvcmFtaWVudG8gb3JpZW50YWRhcyBhIGFqdXN0YXIgbGEgZXN0cnVjdHVyYSBvcmdhbml6YWNpb25hbDsgYWxndW5hcyBhY2Npb25lcyBpbmNsdXllbiBsYSBzaW1wbGlmaWNhY2nDs24gZGUgamVyYXJxdcOtYXMgcGFyYSBtZWpvcmFyIGxhIGNvbXVuaWNhY2nDs24geSBhZ2lsaXphciBsYSB0b21hIGRlIGRlY2lzaW9uZXMsIGxhIHJlZGlzdHJpYnVjacOzbiBkZSB0YXJlYXMgcGFyYSBlbGltaW5hciByZWR1bmRhbmNpYXMsIGxhIGNyZWFjacOzbiBkZSBlcXVpcG9zIG11bHRpZGlzY2lwbGluYXJpb3MgcXVlIGZvcnRhbGV6Y2FuIGxhIGNvbGFib3JhY2nDs24geSBsYSBpbnRlZ3JhY2nDs24gZGUgdGVjbm9sb2fDrWEgcGFyYSBmYWNpbGl0YXIgbG9zIHByb2Nlc29zIHkgbWVqb3JhciBsYSBlZmljaWVuY2lhLgoKICAgICAgICAuYmctY29sb3ItNi5wLTQubWItNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIHAubWItMCBFc3RlIGFuw6FsaXNpcyBzZSBjb252aWVydGUgZW4gdW5hIGZ1ZW50ZSBkZSBpbmZvcm1hY2nDs24gaW1wb3J0YW50ZSB5IG5lY2VzYXJpYSBwYXJhIGVsIHByb2Nlc28gZGUgcGxhbmVhY2nDs24gZXN0cmF0w6lnaWNhLCBwdWVzdG8gcXVlLCBjb25vY2VyIGEgZm9uZG8gY8OzbW8gZXN0w6Egb3JnYW5pemFkYSBsYSBlbXByZXNhLCBwZXJtaXRlIHRvbWFyIGRlY2lzaW9uZXMgbcOhcyBhY2VydGFkYXMgc29icmUgbGEgYXNpZ25hY2nDs24gZGUgcmVjdXJzb3MsIGxhIHJlb3JnYW5pemFjacOzbiBkZSBlcXVpcG9zLCBsYSBtZWpvcmEgZGUgbG9zIGZsdWpvcyBkZSB0cmFiYWpvIHkgZWwgZm9ydGFsZWNpbWllbnRvIGRlIGxhcyBjYXBhY2lkYWRlcyBpbnRlcm5hcy4KICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWRvd24iKSBEZSBlc3RhIG1hbmVyYSwgc2UgYXNlZ3VyYSBxdWUgbGEgZXN0cnVjdHVyYSBzZWEgZnVuY2lvbmFsLCBlIGltcHVsc2UgYSBsYSBlbXByZXNhIGhhY2lhIGVsIGxvZ3JvIGRlIHN1cyBtZXRhcyBhIGxhcmdvIHBsYXpvLgogICAgICAgICAgICAgIAogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wIAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nLmltZy1hLmltZy10KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvMTcucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQoKICAgIC5iZy1mdWxsLXdpZHRoLmJvcmRlci10b3AuY29sb3ItcHJpbWFyaW8KICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTUFURVJJQUwgQ09NUExFTUVOVEFSSU8KICAgICAgICAucm93Lm1hdGVyaWFsLWNvbXBsZW1lbnRhcmlvCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy03CiAgICAgICAgICAgIHAgTG9zIGludml0YW1vcyBhIGV4cGxvcmFyIGVsIG1hdGVyaWFsIGNvbXBsZW1lbnRhcmlvIGRlIGVzdGUgY3Vyc28sIGVuIGVzdGEgc2VjY2nDs24gZW5jb250cmFyw6EgcmVjdXJzb3MgcXVlIGxlIHBlcm1pdGlyw6FuIHByb2Z1bmRpemFyICB5IGVucmlxdWVjZXIgc3UgYXByZW5kaXphamUgZW4gbG9zIHRlbWFzIHRyYXRhZG9zIGVuIGVzdGEgdW5pZGFkLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9lbGlicm8ubmV0L2VzL2VyZWFkZXIvdGVjbm9sb2dpY2FkZWxvcmllbnRlLzI3Mzk5MT9wYWdlPTgiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBWYWxkZXosIEguICgyMDI0KS4gRGlzZcOxbyBkZSBsYSBlc3RydWN0dXJhIG9yZ8OhbmljYSBkZWwgc2lzdGVtYSBvcmdhbml6YWNpb25hbC4gQnVib2sgUHVibGlzaGluZyBTLkwuICAKCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2Jvb2suc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LnJlZGFseWMub3JnL3BkZi8yMTIvMjEyMjQ4NTIwMDMucGRmIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgTWFyw61uIElkw6FycmFnYSwgRC4gQS4gKDIwMTIpLiBFc3RydWN0dXJhIG9yZ2FuaXphY2lvbmFsIHkgc3VzIHBhcsOhbWV0cm9zIGRlIGRpc2XDsW86IEFuw6FsaXNpcyBkZXNjcmlwdGl2byBlbiBweW1lcyBpbmR1c3RyaWFsZXMgZGUgQm9nb3TDoS4gRXN0dWRpb3MgR2VyZW5jaWFsZXMsIDI4KDEyMyksIDQzLTYzLiAKCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby15dC5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1FaW5vdENWWEtIbyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIElFUyBWYWxsZSBkZSBVY28uICgyMDE2KS4gQU7DgUxJU0lTIHkgREVTQVJST0xMTyBPUkdBTklaQUNJT05BTCAtIEVsIGNhbWJpbyBvcmdhbml6YWNpb25hbC4KCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy0zLm9mZnNldC1sZy0xCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL21hdGVyaWFsLWNvbXBsZW1lbnRhcmlvLnN2ZycsIGFsdD0nJykKCg=="},null]}